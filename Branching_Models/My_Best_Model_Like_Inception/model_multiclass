inputs = tf.keras.layers.Input(shape=(IMG_SIZE,IMG_SIZE,3)) # 150 by 150
x = tf.keras.layers.Conv2D(32, (2,2), activation='relu')(inputs)
x = tf.keras.layers.BatchNormalization()(x)
x = tf.keras.layers.Conv2D(32, (2,2))(x)
x = tf.keras.layers.BatchNormalization()(x)
x = tf.keras.layers.Conv2D(32, (2,2))(x)
x = tf.keras.layers.BatchNormalization()(x)
x = tf.keras.layers.BatchNormalization()(x)
x = tf.keras.layers.BatchNormalization()(x)

# Branch!
x1 = tf.keras.layers.Conv2D(32, (2,2))(x)
x1 = tf.keras.layers.BatchNormalization()(x1)
x1 = tf.keras.layers.Conv2D(32, (2,2))(x1)
x1 = tf.keras.layers.BatchNormalization()(x1)
x1 = tf.keras.layers.Conv2D(32, (2,2))(x1)
x1 = tf.keras.layers.BatchNormalization()(x1)
x1 = tf.keras.layers.Conv2D(32, (2,2), activation='elu')(x1)
x1 = tf.keras.layers.BatchNormalization()(x1)

x2 = tf.keras.layers.Conv2D(32, (5,5))(x)

x = tf.keras.layers.Concatenate()([x1,x2])
x = tf.keras.layers.Conv2D(64, (3,3))(x)
x = tf.keras.layers.Conv2D(64, (3,3), activation='elu')(x)
x = tf.keras.layers.Conv2D(64, (3,3))(x)

x1 = tf.keras.layers.Conv2D(64, (2,2))(x)
x1 = tf.keras.layers.Conv2D(64, (3,3))(x1)
x1 = tf.keras.layers.Conv2D(64, (3,3))(x1)
x1 = tf.keras.layers.Conv2D(64, (3,3), activation='elu')(x1)

x2 = tf.keras.layers.Conv2D(64, (2,2))(x)

x2_1 = tf.keras.layers.Conv2D(64, (2,2))(x2)
x2_1 = tf.keras.layers.Conv2D(128, (3,3))(x2_1)

x2_2 = tf.keras.layers.Conv2D(64, (4,4))(x2)

x2 = tf.keras.layers.Concatenate()([x2_1,x2_2])
x2 = tf.keras.layers.Conv2D(64, (4,4), activation='elu')(x2)

x3 = tf.keras.layers.Conv2D(64, (2,2))(x)
x3 = tf.keras.layers.Conv2D(64, (2,2))(x3)
x3 = tf.keras.layers.Conv2D(64, (5,5))(x3)
x3 = tf.keras.layers.Conv2D(128, (2,2), activation='elu')(x3)


x = tf.keras.layers.Concatenate()([x1,x2,x3])
x = tf.keras.layers.Conv2D(64, (2,2))(x)
x = tf.keras.layers.Conv2D(64, (2,2))(x)
x = tf.keras.layers.MaxPool2D(2,2)(x)
x = tf.keras.layers.Conv2D(128, (4,4), activation='elu')(x)
x = tf.keras.layers.MaxPool2D(3,3)(x)
x = tf.keras.layers.Activation('elu')(x)
x = tf.keras.layers.Conv2D(256, (3,3), activation='elu')(x)
x = tf.keras.layers.MaxPool2D(3,3)(x)
x = tf.keras.layers.Activation('elu')(x)


x3 = tf.keras.layers.Flatten()(x)
x3 = tf.keras.layers.Dropout(0.5)(x3)
x3 = tf.keras.layers.Dense(512, activation='relu')(x3)

outputs = tf.keras.layers.Dense(4, activation='softmax')(x3)
model = tf.keras.Model(inputs=inputs, outputs=outputs)
