# First callbacks!
# Cell [1]
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy') > 0.97):
      print("\nAccuracy better target training!")
      self.model.stop_training = True

callbacks = myCallback()

# Cell [2]
%%time
history = model.fit(
    train_generator,
    steps_per_epoch = 41, # 1312 images = batch_size * steps
    epochs = 20,
    validation_data = validation_generator,
    validation_steps = 27, # 876 images = batch_size * steps
    verbose =2,
    callbacks=[callbacks]
)

------------------------------------------------------------------------------------

# Second callbacks
early_stop = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3) #stops training if validation performance doesn't change after 3 epochs

------------------------------------------------------------------------------------

# Use callbacks when val_accuracy no longer increasing, same with val_loss if no longer decreasing!
