# Standard model
model2 = tf.keras.models.Sequential([ 
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3) ), # Standard image shape
    tf.keras.layers.MaxPooling2D(2, 2), 
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'), 
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'), 
    tf.keras.layers.MaxPooling2D(2,2), 
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'), 
    tf.keras.layers.MaxPooling2D(2,2), 
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(512, activation='relu'), 
    tf.keras.layers.Dense(6, activation='softmax'),
]) 


model3 = tf.keras.models.Sequential([ 
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(300, 300, 3) ), # Standard image shape
    tf.keras.layers.MaxPooling2D(2, 2), 
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'), 
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'), 
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.4), 
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'), 
    tf.keras.layers.MaxPooling2D(2,2), 
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.65),
    tf.keras.layers.Dense(1024, activation='relu'), 
    tf.keras.layers.Dense(3, activation='softmax'),
])

# To get higher val_accuracy (must long train to make val_loss decrease)
model4 = tf.keras.models.Sequential([ 
    tf.keras.layers.Conv2D(16, (3,3), activation='elu', input_shape=(300, 300, 3) ), # Standard image shape
    tf.keras.layers.MaxPooling2D(2, 2), 
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Conv2D(32, (3,3), activation='elu'), 
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Conv2D(64, (3,3), activation='elu'), 
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Conv2D(128, (3,3), activation='elu'), 
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(256, (3,3), activation='elu'), 
    tf.keras.layers.MaxPooling2D(2,2), 
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(1024, activation='elu'),
    tf.keras.layers.LeakyReLU(alpha=(0.1)),
    tf.keras.layers.Dense(3, activation='softmax'),
]) 

# Better, but need more testing flight hour (clock flown)
model4 = tf.keras.models.Sequential([ 
    tf.keras.layers.Conv2D(16, (3,3), activation='elu', input_shape=(300, 300, 3) ), # Standard image shape
    tf.keras.layers.LeakyReLU(alpha=(0.1)),
    tf.keras.layers.MaxPooling2D(2, 2), 
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Conv2D(32, (3,3), activation='elu'), 
    tf.keras.layers.LeakyReLU(alpha=(0.1)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Conv2D(64, (3,3), activation='elu'), 
    tf.keras.layers.LeakyReLU(alpha=(0.1)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Conv2D(128, (3,3), activation='elu'), 
    tf.keras.layers.LeakyReLU(alpha=(0.1)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Conv2D(256, (3,3), activation='elu'), 
    tf.keras.layers.LeakyReLU(alpha=(0.1)),
    tf.keras.layers.MaxPooling2D(2,2), 
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(1024, activation='elu'),
    tf.keras.layers.LeakyReLU(alpha=(0.1)),
    tf.keras.layers.Dense(3, activation='softmax'),
]) 

# Best model
model = tf.keras.models.Sequential([ 
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3) ), # Standard image shape
    tf.keras.layers.MaxPooling2D(2, 2), 
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'), 
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'), 
    tf.keras.layers.MaxPooling2D(2,2), 
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'), 
    tf.keras.layers.MaxPooling2D(2,2), 
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(512, activation='relu'), 
    tf.keras.layers.Dense(4,activation='softmax'),
]) 
